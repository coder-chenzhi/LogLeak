需要访问服务器
日志路径已知
敏感信息有明显特征，可以通过关键词定位；敏感信息是明文，不需要解码

攻击方式：需要访问系统，如果是内部人员的话，只需要在命令行中按步骤操作就能找到敏感信息

Insecure Default Password - CVE-2020-8828
As of Argo v1.5.0, the default admin password is set to the argocd-server pod name. To determine the impact of this issue, the following questions must be answered:

Have you changed the admin password?
Does the argocd-server pod name contain sufficient entropy? (see details below)
Is the Argo API accessible on the internet? To internal pods?
Do unprivileged users in your organization have access to list pods in the argo namespace?
Do unprivileged users in your organization have access to logs which list pod names?
Although there is currently no published fix for this issue, it can be mitigated by disabling the admin user or by changing the admin user password. Argo must be updated to v1.5.0 or later to apply this mitigation.

 

Technical Details
As of v1.5.0, the default admin password is set to the argocd-server pod name.

For insiders with access to the cluster or logs, this issue could be abused for privilege escalation, as Argo has privileged roles. A malicious insider is the most realistic threat, but pod names are not meant to be kept secret and could wind up just about anywhere.

To understand the risk of a black-box external attacker bruteforcing the password, we must understand the how pods are named. Below is the default naming scheme if you YOLO kubectl apply -f  the installation manifest in GCP:

    argocd-server-55594fbdb9-ptsf5
    |    name   ||ReplicaSet||rand|

The name is static, and rand is easily enumerable. However, bruteforcing the ReplicaSet value in addition to rand is not feasible. 

The rand value is produced by Kubernetes' random name generator. The function that generates those characters is a time-seeded PRNG, and not a CSPRNG—the values are predictable and not truly random:

github.com/kubernetes/apimachinery/blob/master/pkg/util/rand/rand.go:26

var rng = struct {
    sync.Mutex
    rand *rand.Rand
}{
    rand: rand.New(rand.NewSource(time.Now().UnixNano())),
}

This presents an interesting attack opportunity if the attacker knows when the k8s server was instantiated. However with rand only being five characters, it's easier to just bruteforce rand.

 


The ReplicaSet value is deterministically derived from a hash of the PodTemplate, which includes the metadata and the spec. It is unlikely that an attacker has access to the information necessary to determine this value. That said, it's conceivable that this could be successfully fuzzed to generate the legitimate value in some environments.

Because the value is deterministic, deploying the same manifests into the same environment will result in the same ReplicaSet value. For example, at the time of writing if you deploy the Argo installation manifest from GitHub to a fresh GKE cluster, the ReplicaSet value will be 55594fbdb9.

The variable length of the ReplicaSet value is noteworthy, as characters are removed to prevent "bad words". While not always easily bruteforceable, pod names should not be used in a security context.

 